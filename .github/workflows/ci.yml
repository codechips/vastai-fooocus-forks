# CI workflow for testing and linting
name: CI

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  lint-dockerfiles:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Lint base Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: dockerfiles/base/Dockerfile
        failure-threshold: warning

    - name: Lint mashb1t Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: forks/mashb1t/Dockerfile
        failure-threshold: warning

    - name: Lint ruined Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: forks/ruined/Dockerfile
        failure-threshold: warning

    - name: Lint extend Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: forks/extend/Dockerfile
        failure-threshold: warning

    - name: Lint mre Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: forks/mre/Dockerfile
        failure-threshold: warning

  test-provisioning:
    name: Test Provisioning System
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Test provisioning script syntax
      run: |
        # Test that the provisioning script runs without errors
        ./scripts/provision/provision.py --help
        
    - name: Validate TOML configurations
      run: |
        # Install tomli to test TOML parsing
        uv run --with tomli python -c "
        import tomli
        import os
        import glob
        
        # Test all example TOML files
        for toml_file in glob.glob('examples/*.toml'):
            print(f'Validating {toml_file}')
            with open(toml_file, 'rb') as f:
                try:
                    config = tomli.load(f)
                    print(f'✅ {toml_file} is valid')
                except Exception as e:
                    print(f'❌ {toml_file} failed: {e}')
                    exit(1)
        
        # Test provision config files
        for toml_file in glob.glob('config/provision/*.toml'):
            print(f'Validating {toml_file}')
            with open(toml_file, 'rb') as f:
                try:
                    config = tomli.load(f)
                    print(f'✅ {toml_file} is valid')
                except Exception as e:
                    print(f'❌ {toml_file} failed: {e}')
                    exit(1)
                    
        print('All TOML files are valid!')
        "
        
    - name: Test provisioning dry run
      run: |
        # Create test workspace
        mkdir -p /tmp/test-workspace/fooocus/models/{checkpoints,loras,vae,controlnet,upscale_models,embeddings}
        mkdir -p /tmp/test-workspace/logs
        
        # Set environment variables
        export WORKSPACE="/tmp/test-workspace"
        
        # Test dry run with minimal config
        timeout 60 ./scripts/provision/provision.py examples/test-provision-minimal.toml --dry-run || echo "Dry run test completed"

  validate-scripts:
    name: Validate Shell Scripts
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Validate bash scripts
      run: |
        # Check syntax of all shell scripts
        for script in scripts/*.sh scripts/services/*.sh; do
          echo "Checking $script"
          bash -n "$script" || exit 1
        done
        echo "All shell scripts have valid syntax!"